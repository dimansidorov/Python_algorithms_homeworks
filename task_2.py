"""
Задание 2.

Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.

Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.

Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение
"""
# Урок 2. Алгоритмы.
# Задание 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа
# под номером 32 и заканчивая 127-м включительно.
# Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
from memory_profiler import profile


@profile
def some_func(start=32, end=127, st=''):
    if start > end:
        return
    else:
        print(f'{start} - {chr(start)} ', end='')
        if start % 10 == 1:
            print('\n')
        some_func(start + 1)

some_func()


@profile
def some_func2(start=32, end=127, st=''):
    for i in range(start, end + 1):
        print(f'{i} - {chr(i)} ', end='')
        if i % 10 == 1:
            print('\n')

some_func2()

'''
Декоратор считывает только первый шаг рекурсии. 
Проблему решил через цикл. Цикл оптимиризует данное решение.
'''
